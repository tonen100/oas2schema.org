{
	"@context": "http://schema.org",
	"@type": "WebAPI",
	"title": "Adafruit IO",
	"description": "### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  ",
	"availableChannel": [
		{
			"@type": "ServiceChannel",
			"name": "User",
			"serviceUrl": "https://io.adafruit.com/api/v2/user",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Current user",
					"url": "https://io.adafruit.com/api/v2/user",
					"disambiguatingDescription": "Get information about the current user"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Webhooks feed :token",
			"serviceUrl": "https://io.adafruit.com/api/v2/webhooks/feed/:token",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create webhook feed data",
					"url": "https://io.adafruit.com/api/v2/webhooks/feed/:token",
					"description": "",
					"disambiguatingDescription": "Send data to a feed via webhook URL."
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Webhooks feed :token raw",
			"serviceUrl": "https://io.adafruit.com/api/v2/webhooks/feed/:token/raw",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create raw webhook feed data",
					"url": "https://io.adafruit.com/api/v2/webhooks/feed/:token/raw",
					"description": "The raw data webhook receiver accepts POST requests and stores the raw request body on your feed. This is useful when you don't have control of the webhook sender. If feed history is turned on, payloads will be truncated at 1024 bytes. If feed history is turned off, payloads will be truncated at 100KB.",
					"disambiguatingDescription": "Send arbitrary data to a feed via webhook URL."
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username activities",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/activities",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy activities",
					"url": "https://io.adafruit.com/api/v2/{username}/activities",
					"description": "Delete all your activities.",
					"disambiguatingDescription": "All activities for current user"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All activities",
					"url": "https://io.adafruit.com/api/v2/{username}/activities",
					"description": "The Activities endpoint returns information about the user's activities.",
					"disambiguatingDescription": "All activities for current user"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username activities type",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/activities/{type}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get activity",
					"url": "https://io.adafruit.com/api/v2/{username}/activities/{type}",
					"description": "The Activities endpoint returns information about the user's activities.",
					"disambiguatingDescription": "Get activities by type for current user"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username dashboards",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/dashboards",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All dashboards",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards",
					"description": "The Dashboards endpoint returns information about the user's dashboards. ",
					"disambiguatingDescription": "All dashboards for current user"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create dashboard",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards",
					"description": "",
					"disambiguatingDescription": "Create a new Dashboard"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username dashboards dashboard id blocks",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All blocks",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks",
					"description": "The Blocks endpoint returns information about the user's blocks. ",
					"disambiguatingDescription": "All blocks for current user"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create block",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks",
					"description": "",
					"disambiguatingDescription": "Create a new Block"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username dashboards dashboard id blocks id",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks/{id}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy block",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks/{id}",
					"description": "",
					"disambiguatingDescription": "Delete an existing Block"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get block",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks/{id}",
					"description": "",
					"disambiguatingDescription": "Returns Block based on ID"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update block",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks/{id}",
					"description": "",
					"disambiguatingDescription": "Update properties of an existing Block"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace block",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{dashboard_id}/blocks/{id}",
					"description": "",
					"disambiguatingDescription": "Replace an existing Block"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username dashboards id",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/dashboards/{id}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy dashboard",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{id}",
					"description": "",
					"disambiguatingDescription": "Delete an existing Dashboard"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get dashboard",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{id}",
					"description": "",
					"disambiguatingDescription": "Returns Dashboard based on ID"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update dashboard",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{id}",
					"description": "",
					"disambiguatingDescription": "Update properties of an existing Dashboard"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace dashboard",
					"url": "https://io.adafruit.com/api/v2/{username}/dashboards/{id}",
					"description": "",
					"disambiguatingDescription": "Replace an existing Dashboard"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All feeds",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds",
					"description": "The Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed.",
					"disambiguatingDescription": "All feeds for current user"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create feed",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds",
					"description": "",
					"disambiguatingDescription": "Create a new Feed"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy feed",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}",
					"description": "",
					"disambiguatingDescription": "Delete an existing Feed"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get feed",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}",
					"description": "Returns feed based on the feed key",
					"disambiguatingDescription": "Get feed by feed key"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update feed",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}",
					"description": "",
					"disambiguatingDescription": "Update properties of an existing Feed"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace feed",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}",
					"description": "",
					"disambiguatingDescription": "Replace an existing Feed"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data",
					"description": "",
					"disambiguatingDescription": "Get all data for the given feed"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data",
					"description": "Create new data records on the given feed.  **NOTE:** when feed history is on, data `value` size is limited to 1KB, when feed history is turned off data value size is limited to 100KB.",
					"disambiguatingDescription": "Create new Data"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data batch",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/batch",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Batch create data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/batch",
					"disambiguatingDescription": "Create multiple new Data records"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data chart",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/chart",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Chart data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/chart",
					"description": "The Chart API is what we use on io.adafruit.com to populate charts over varying timespans with a consistent number of data points. The maximum number of points returned is 480. This API works by aggregating slices of time into a single value by averaging.  All time-based parameters are optional, if none are given it will default to 1 hour at the finest-grained resolution possible.",
					"disambiguatingDescription": "Chart data for current feed"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data first",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/first",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "First data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/first",
					"description": "Get the oldest data point in the feed. This request sets the queue pointer to the beginning of the feed.",
					"disambiguatingDescription": "First Data in Queue"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data last",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/last",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Last data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/last",
					"description": "Get the most recent data point in the feed. This request sets the queue pointer to the end of the feed.",
					"disambiguatingDescription": "Last Data in Queue"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data next",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/next",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Next data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/next",
					"description": "Get the next newest data point in the feed. If queue processing hasn't been started, the first data point in the feed will be returned.",
					"disambiguatingDescription": "Next Data in Queue"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data previous",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/previous",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Previous data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/previous",
					"description": "Get the previously processed data point in the feed. NOTE: this method doesn't move the processing queue pointer.",
					"disambiguatingDescription": "Previous Data in Queue"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data retain",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/retain",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Retain data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/retain",
					"description": "Get the most recent data point in the feed in an MQTT compatible CSV format: `value,lat,lon,ele`",
					"disambiguatingDescription": "Last Data in MQTT CSV format"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key data id",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/{id}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/{id}",
					"description": "",
					"disambiguatingDescription": "Delete existing Data"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/{id}",
					"description": "",
					"disambiguatingDescription": "Returns data based on feed key"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/{id}",
					"description": "",
					"disambiguatingDescription": "Update properties of existing Data"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace data",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/data/{id}",
					"description": "",
					"disambiguatingDescription": "Replace existing Data"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username feeds feed key details",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/details",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get feed details",
					"url": "https://io.adafruit.com/api/v2/{username}/feeds/{feed_key}/details",
					"description": "Returns more detailed feed record based on the feed key",
					"disambiguatingDescription": "Get detailed feed by feed key"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All groups",
					"url": "https://io.adafruit.com/api/v2/{username}/groups",
					"description": "The Groups endpoint returns information about the user's groups. The response includes the latest value of each feed in the group, and other metadata about the group. ",
					"disambiguatingDescription": "All groups for current user"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create group",
					"url": "https://io.adafruit.com/api/v2/{username}/groups",
					"description": "",
					"disambiguatingDescription": "Create a new Group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups group key",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy group",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}",
					"description": "",
					"disambiguatingDescription": "Delete an existing Group"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get group",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}",
					"disambiguatingDescription": "Returns Group based on ID"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update group",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}",
					"description": "",
					"disambiguatingDescription": "Update properties of an existing Group"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace group",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}",
					"description": "",
					"disambiguatingDescription": "Replace an existing Group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups group key add",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/add",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Add feed to group",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/add",
					"description": "",
					"disambiguatingDescription": "Add an existing Feed to a Group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups group key data",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/data",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create group data",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/data",
					"disambiguatingDescription": "Create new data for multiple feeds in a group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups group key feeds",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All group feeds",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds",
					"description": "The Group Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed, but only for feeds within the given group.",
					"disambiguatingDescription": "All feeds for current user in a given group"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create group feed",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds",
					"description": "",
					"disambiguatingDescription": "Create a new Feed in a Group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups group key feeds feed key data",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds/{feed_key}/data",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All group feed data",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds/{feed_key}/data",
					"description": "",
					"disambiguatingDescription": "All data for current feed in a specific group"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create group feed data",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds/{feed_key}/data",
					"disambiguatingDescription": "Create new Data in a feed belonging to a particular group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups group key feeds feed key data batch",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds/{feed_key}/data/batch",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Batch create group feed data",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/feeds/{feed_key}/data/batch",
					"disambiguatingDescription": "Create multiple new Data records in a feed belonging to a particular group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username groups group key remove",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/remove",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Remove feed from group",
					"url": "https://io.adafruit.com/api/v2/{username}/groups/{group_key}/remove",
					"description": "",
					"disambiguatingDescription": "Remove a Feed from a Group"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username throttle",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/throttle",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get current user throttle",
					"url": "https://io.adafruit.com/api/v2/{username}/throttle",
					"disambiguatingDescription": "Get the user's data rate limit and current activity level."
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username tokens",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/tokens",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All tokens",
					"url": "https://io.adafruit.com/api/v2/{username}/tokens",
					"description": "The Tokens endpoint returns information about the user's tokens. ",
					"disambiguatingDescription": "All tokens for current user"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create token",
					"url": "https://io.adafruit.com/api/v2/{username}/tokens",
					"description": "",
					"disambiguatingDescription": "Create a new Token"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username tokens id",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/tokens/{id}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy token",
					"url": "https://io.adafruit.com/api/v2/{username}/tokens/{id}",
					"description": "",
					"disambiguatingDescription": "Delete an existing Token"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get token",
					"url": "https://io.adafruit.com/api/v2/{username}/tokens/{id}",
					"description": "",
					"disambiguatingDescription": "Returns Token based on ID"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update token",
					"url": "https://io.adafruit.com/api/v2/{username}/tokens/{id}",
					"description": "",
					"disambiguatingDescription": "Update properties of an existing Token"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace token",
					"url": "https://io.adafruit.com/api/v2/{username}/tokens/{id}",
					"description": "",
					"disambiguatingDescription": "Replace an existing Token"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username triggers",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/triggers",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All triggers",
					"url": "https://io.adafruit.com/api/v2/{username}/triggers",
					"description": "The Triggers endpoint returns information about the user's triggers. ",
					"disambiguatingDescription": "All triggers for current user"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create trigger",
					"url": "https://io.adafruit.com/api/v2/{username}/triggers",
					"description": "",
					"disambiguatingDescription": "Create a new Trigger"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username triggers id",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/triggers/{id}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy trigger",
					"url": "https://io.adafruit.com/api/v2/{username}/triggers/{id}",
					"description": "",
					"disambiguatingDescription": "Delete an existing Trigger"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get trigger",
					"url": "https://io.adafruit.com/api/v2/{username}/triggers/{id}",
					"description": "",
					"disambiguatingDescription": "Returns Trigger based on ID"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update trigger",
					"url": "https://io.adafruit.com/api/v2/{username}/triggers/{id}",
					"description": "",
					"disambiguatingDescription": "Update properties of an existing Trigger"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace trigger",
					"url": "https://io.adafruit.com/api/v2/{username}/triggers/{id}",
					"description": "",
					"disambiguatingDescription": "Replace an existing Trigger"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username type type id acl",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "All permissions",
					"url": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl",
					"description": "The Permissions endpoint returns information about the user's permissions. ",
					"disambiguatingDescription": "All permissions for current user and type"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "post",
					"name": "Create permission",
					"url": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl",
					"description": "",
					"disambiguatingDescription": "Create a new Permission"
				}
			]
		},
		{
			"@type": "ServiceChannel",
			"name": "Username type type id acl id",
			"serviceUrl": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl/{id}",
			"providesService": [
				{
					"@type": "EntryPoint",
					"httpMethod": "delete",
					"name": "Destroy permission",
					"url": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl/{id}",
					"description": "",
					"disambiguatingDescription": "Delete an existing Permission"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "get",
					"name": "Get permission",
					"url": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl/{id}",
					"description": "",
					"disambiguatingDescription": "Returns Permission based on ID"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "patch",
					"name": "Update permission",
					"url": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl/{id}",
					"description": "",
					"disambiguatingDescription": "Update properties of an existing Permission"
				},
				{
					"@type": "EntryPoint",
					"httpMethod": "put",
					"name": "Replace permission",
					"url": "https://io.adafruit.com/api/v2/{username}/{type}/{type_id}/acl/{id}",
					"description": "",
					"disambiguatingDescription": "Replace an existing Permission"
				}
			]
		}
	]
}